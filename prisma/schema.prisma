// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  name         String
  surname      String?
  email        String   @unique
  password     String
  role         String? // admin Vip null  
  course       String?
  active       Boolean  @default(true)
  acceptNotifi Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  offerts      Offer[]
  Rate         Rate[]
}

model Offer {
  id            Int       @id @default(autoincrement())
  title         String
  description   String?
  active        Boolean   @default(true)
  contactEmail  String?
  location      String?
  published     DateTime  @default(now()) // iso 8601
  expired       DateTime // iso 8601
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  // FK
  Idcategory    Int?
  category      Category? @relation(fields: [Idcategory], references: [id])
  IdUserCreator Int
  userCreator   User      @relation(fields: [IdUserCreator], references: [id])
  Rate          Rate[]
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  offers    Offer[]
}

model Rate {
  idUser  Int
  idOffer Int
  value   Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User  @relation(fields: [idUser], references: [id])
  offer Offer @relation(fields: [idOffer], references: [id])

  @@id([idUser, idOffer])
}
