// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id           Int              @id @default(autoincrement())
  name         String           @unique
  email        String           @unique
  role         String
  password     String
  level        Int              @default(0)
  maxLevel     Int              @default(0)
  pokePuntos   Int              @default(30)
  wins         Int              @default(0)
  pokemons     UserPokemon[]
  quejas       Quejas[]
  intercambios IntercambioGTS[]

  gamesAsPlayer1 Game[] @relation("Player1Games")
  gamesAsPlayer2 Game[] @relation("Player2Games")
}

model Pokemon {
  id        Int    @id
  name      String @unique
  sprite    String
  stats     Json
  types     Json
  abilities Json

  userPokemons UserPokemon[]
  deseadoEn    IntercambioGTS[] @relation("Deseado", fields: [], references: [])
  ofrecidoEn   IntercambioGTS[] @relation("Ofrecido", fields: [], references: [])
}

model UserPokemon {
  id          Int      @id
  userId      Int
  pokemonName String
  unlocked    Boolean  @default(false)
  isTeam      Boolean  @default(false)
  sprite      String?
  user        User?    @relation(fields: [userId], references: [id])
  pokemon     Pokemon? @relation(fields: [pokemonName], references: [name])

  @@unique([userId, pokemonName])
}

model Quejas {
  id          Int    @id @default(autoincrement())
  userId      Int
  titulo      String
  descripcion String
  user        User   @relation(fields: [userId], references: [id])
}

enum EstadoIntercambio {
  abierto
  intercambiado
}

model IntercambioGTS {
  id                   Int               @id @default(autoincrement())
  usuarioId            Int
  userPokemonId        Int
  pokemonSprite        String
  pokemonDeseadoId     Int
  pokemonDeseadoSprite String
  estado               EstadoIntercambio @default(abierto)
  fechaCreacion        DateTime          @default(now())

  usuario         User    @relation(fields: [usuarioId], references: [id])
  pokemonOfrecido Pokemon @relation("Ofrecido", fields: [userPokemonId], references: [id])
  pokemonDeseado  Pokemon @relation("Deseado", fields: [pokemonDeseadoId], references: [id])
}

model Game {
  id          Int      @id @default(autoincrement())
  password    String
  player1Id   Int
  player2Id   Int?
  currentTurn Int      @default(1)
  status      String   @default("waiting")
  winner      String?
  createdAt   DateTime @default(now())

  player1 User  @relation("Player1Games", fields: [player1Id], references: [id])
  player2 User? @relation("Player2Games", fields: [player2Id], references: [id])

  rounds Round[]

}

model Round {
  id            Int      @id @default(autoincrement())
  gameId        Int
  roundNumber   Int
  player1Choice Json?
  player2Choice Json?
  winner        String?
  selectedStat  Int?
  createdAt     DateTime @default(now())
 
  game Game @relation(fields: [gameId], references: [id])

  @@unique([gameId, roundNumber])
}